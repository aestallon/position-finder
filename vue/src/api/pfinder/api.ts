/* tslint:disable */
/* eslint-disable */
/**
 * Position Finder API
 * ... 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: papp.szabolcs.bazil@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * Generic response the API answers with, when it cannot return a 2xx status response. 
 * @export
 * @interface ApiError
 */
export interface ApiError {
    /**
     * The HTTP status code is provided here for the sake of convenience. 
     * @type {number}
     * @memberof ApiError
     */
    'status': number;
    /**
     * 
     * @type {Array<ApiErrorElement>}
     * @memberof ApiError
     */
    'errors': Array<ApiErrorElement>;
}
/**
 * Describes an individual error that was encountered while interpreting or processing the request and its payload. 
 * @export
 * @interface ApiErrorElement
 */
export interface ApiErrorElement {
    /**
     * The name of the exact element pertaining to this error. 
     * @type {string}
     * @memberof ApiErrorElement
     */
    'fieldName': string;
    /**
     * A short standardised code of the kind of error encountered. 
     * @type {string}
     * @memberof ApiErrorElement
     */
    'code': string;
    /**
     * Human readable message describing the error. 
     * @type {string}
     * @memberof ApiErrorElement
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ClientCreationRequest
 */
export interface ClientCreationRequest {
    /**
     * The unique name of this client. 
     * @type {string}
     * @memberof ClientCreationRequest
     */
    'name': string;
    /**
     * A valid e-mail address 
     * @type {string}
     * @memberof ClientCreationRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface ClientCreationResponse
 */
export interface ClientCreationResponse {
    /**
     * The API key with which this application\'s endpoints may be interacted with. 
     * @type {string}
     * @memberof ClientCreationResponse
     */
    'apiKey'?: string;
}
/**
 * 
 * @export
 * @interface Position
 */
export interface Position {
    /**
     * The name of the occupation. 
     * @type {string}
     * @memberof Position
     */
    'name': string;
    /**
     * Freeform location of the position. 
     * @type {string}
     * @memberof Position
     */
    'location': string;
}
/**
 * The object returned after a query is performed. Contained URLs are to be interpreted to be relative to the API host. 
 * @export
 * @interface PositionSearchResult
 */
export interface PositionSearchResult {
    /**
     * 
     * @type {Array<string>}
     * @memberof PositionSearchResult
     */
    'urls'?: Array<string>;
}

/**
 * ClientApi - axios parameter creator
 * @export
 */
export const ClientApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Unsecured endpoint that enables \'registering\' a client with this API, returning an key, which is valid until revocation. 
         * @summary Registers a client to acquire an API key.
         * @param {ClientCreationRequest} clientCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient: async (clientCreationRequest: ClientCreationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientCreationRequest' is not null or undefined
            assertParamExists('createClient', 'clientCreationRequest', clientCreationRequest)
            const localVarPath = `/client`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientCreationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientApi - functional programming interface
 * @export
 */
export const ClientApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientApiAxiosParamCreator(configuration)
    return {
        /**
         * Unsecured endpoint that enables \'registering\' a client with this API, returning an key, which is valid until revocation. 
         * @summary Registers a client to acquire an API key.
         * @param {ClientCreationRequest} clientCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createClient(clientCreationRequest: ClientCreationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientCreationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createClient(clientCreationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClientApi - factory interface
 * @export
 */
export const ClientApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientApiFp(configuration)
    return {
        /**
         * Unsecured endpoint that enables \'registering\' a client with this API, returning an key, which is valid until revocation. 
         * @summary Registers a client to acquire an API key.
         * @param {ClientCreationRequest} clientCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient(clientCreationRequest: ClientCreationRequest, options?: any): AxiosPromise<ClientCreationResponse> {
            return localVarFp.createClient(clientCreationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClientApi - object-oriented interface
 * @export
 * @class ClientApi
 * @extends {BaseAPI}
 */
export class ClientApi extends BaseAPI {
    /**
     * Unsecured endpoint that enables \'registering\' a client with this API, returning an key, which is valid until revocation. 
     * @summary Registers a client to acquire an API key.
     * @param {ClientCreationRequest} clientCreationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    public createClient(clientCreationRequest: ClientCreationRequest, options?: AxiosRequestConfig) {
        return ClientApiFp(this.configuration).createClient(clientCreationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PositionApi - axios parameter creator
 * @export
 */
export const PositionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new position.
         * @summary Creates a new position.
         * @param {Position} position 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPosition: async (position: Position, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'position' is not null or undefined
            assertParamExists('createPosition', 'position', position)
            const localVarPath = `/position`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthorization required
            await setApiKeyToObject(localVarHeaderParameter, "X-Aest-Token", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(position, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attempts to return a position by the denoted identifier. 
         * @summary Fetches a position.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosition: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPosition', 'id', id)
            const localVarPath = `/position/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthorization required
            await setApiKeyToObject(localVarHeaderParameter, "X-Aest-Token", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search all persisted positions to find the ones with matching name/location. The search parameters are to be supplied in the query fragment of the URL. The operation returns a list of URLS (relative to the host of this API), on which the found positions can be inspected. 
         * @summary Searches for matching positions
         * @param {string} [name] 
         * @param {string} [location] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPosition: async (name?: string, location?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/position/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthorization required
            await setApiKeyToObject(localVarHeaderParameter, "X-Aest-Token", configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (location !== undefined) {
                localVarQueryParameter['location'] = location;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PositionApi - functional programming interface
 * @export
 */
export const PositionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PositionApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new position.
         * @summary Creates a new position.
         * @param {Position} position 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPosition(position: Position, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Position>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPosition(position, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Attempts to return a position by the denoted identifier. 
         * @summary Fetches a position.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPosition(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Position>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPosition(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search all persisted positions to find the ones with matching name/location. The search parameters are to be supplied in the query fragment of the URL. The operation returns a list of URLS (relative to the host of this API), on which the found positions can be inspected. 
         * @summary Searches for matching positions
         * @param {string} [name] 
         * @param {string} [location] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchPosition(name?: string, location?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PositionSearchResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchPosition(name, location, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PositionApi - factory interface
 * @export
 */
export const PositionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PositionApiFp(configuration)
    return {
        /**
         * Creates a new position.
         * @summary Creates a new position.
         * @param {Position} position 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPosition(position: Position, options?: any): AxiosPromise<Position> {
            return localVarFp.createPosition(position, options).then((request) => request(axios, basePath));
        },
        /**
         * Attempts to return a position by the denoted identifier. 
         * @summary Fetches a position.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosition(id: number, options?: any): AxiosPromise<Position> {
            return localVarFp.getPosition(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Search all persisted positions to find the ones with matching name/location. The search parameters are to be supplied in the query fragment of the URL. The operation returns a list of URLS (relative to the host of this API), on which the found positions can be inspected. 
         * @summary Searches for matching positions
         * @param {string} [name] 
         * @param {string} [location] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPosition(name?: string, location?: string, options?: any): AxiosPromise<PositionSearchResult> {
            return localVarFp.searchPosition(name, location, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PositionApi - object-oriented interface
 * @export
 * @class PositionApi
 * @extends {BaseAPI}
 */
export class PositionApi extends BaseAPI {
    /**
     * Creates a new position.
     * @summary Creates a new position.
     * @param {Position} position 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionApi
     */
    public createPosition(position: Position, options?: AxiosRequestConfig) {
        return PositionApiFp(this.configuration).createPosition(position, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Attempts to return a position by the denoted identifier. 
     * @summary Fetches a position.
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionApi
     */
    public getPosition(id: number, options?: AxiosRequestConfig) {
        return PositionApiFp(this.configuration).getPosition(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search all persisted positions to find the ones with matching name/location. The search parameters are to be supplied in the query fragment of the URL. The operation returns a list of URLS (relative to the host of this API), on which the found positions can be inspected. 
     * @summary Searches for matching positions
     * @param {string} [name] 
     * @param {string} [location] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionApi
     */
    public searchPosition(name?: string, location?: string, options?: AxiosRequestConfig) {
        return PositionApiFp(this.configuration).searchPosition(name, location, options).then((request) => request(this.axios, this.basePath));
    }
}


