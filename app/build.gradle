plugins {
  id 'java'
  id 'org.springframework.boot' version '2.7.18'
  id 'io.spring.dependency-management' version '1.1.0'
  id 'org.openapi.generator' version '6.2.1'
}

group = 'hu.aestallon.bredex'
version = '1.0.0'

repositories {
  mavenCentral()
}

java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(11))
  }
}

dependencies {
  implementation 'com.google.guava:guava:33.0.0-jre'

  implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-web'

  implementation 'io.swagger.core.v3:swagger-annotations:2.2.6'
  implementation 'org.openapitools:jackson-databind-nullable:0.2.4'
  implementation 'javax.annotation:javax.annotation-api:1.3.2'
  implementation 'javax.validation:validation-api:2.0.1.Final'
  implementation 'javax.servlet:javax.servlet-api:4.0.1'
  implementation 'org.springdoc:springdoc-openapi-ui:1.6.15'
  implementation 'org.springdoc:springdoc-openapi-security:1.6.15'

  runtimeOnly 'com.h2database:h2'

  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'

  testImplementation platform('org.junit:junit-bom:5.9.1')
  testImplementation 'org.junit.jupiter:junit-jupiter'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
}

test {
  useJUnitPlatform()
}

openApiGenerate {
  generatorName = "spring"
  inputSpec = "$rootDir/spec/position-finder-api-v1.yaml".toString()
  outputDir = "$rootDir/app".toString()
  apiPackage = "hu.aestallon.bredex.positionfinder.app.rest.generated.api"
  modelPackage = "hu.aestallon.bredex.positionfinder.app.rest.generated.model"
  configOptions = [
    dateLibrary            : "java8-localdatetime",
    delegatePattern        : "true",
    fullJavaUtil           : "true",
    library                : "spring-boot",
    documentationProvied   : "none",
    useOptional            : "true",
    useSwaggerUI           : "false",
    hideGenerationTimestamp: "true"
  ]
  globalProperties = [
    apis  : "",
    models: ""
  ]
  supportingFilesConstrainedTo = [
    "ApiUtil.java",
    "RFC3339DateFormat.java"
  ]
}

tasks.named("jar") {
  enabled = false
}

def processFrontendResourcesTask = 'processFrontendResources'

tasks.register(processFrontendResourcesTask, Copy) {
  def frontendBuildDir = file("${project(':vue').buildDir}/../dist")
  def appResourcesDir = file("${project.buildDir}/resources/main/static")

  group 'frontend'
  description 'process frontend resources'
  dependsOn project(':vue').tasks.named('assembleFrontend')

  println "copying frontend resources from [ $frontendBuildDir ] to [ $appResourcesDir ]"

  from frontendBuildDir
  into appResourcesDir
}

tasks.named('processResources') {
  dependsOn tasks.named(processFrontendResourcesTask)
}
