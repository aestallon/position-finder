/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package hu.aestallon.bredex.positionfinder.app.rest.generated.api;

import hu.aestallon.bredex.positionfinder.app.rest.generated.model.ApiError;
import hu.aestallon.bredex.positionfinder.app.rest.generated.model.ClientCreationRequest;
import hu.aestallon.bredex.positionfinder.app.rest.generated.model.ClientCreationResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "client", description = "Endpoints pertaining to client registration and API key acquisition")
public interface ClientApi {

    default ClientApiDelegate getDelegate() {
        return new ClientApiDelegate() {};
    }

    /**
     * POST /client : Registers a client to acquire an API key.
     * Unsecured endpoint that enables &#39;registering&#39; a client with this API, returning an key, which is valid until revocation. 
     *
     * @param clientCreationRequest  (required)
     * @return Ok (status code 201)
     *         or Bad Request (status code 400)
     *         or Conflict - returned if a client with the provided name already exists. (status code 409)
     */
    @Operation(
        operationId = "createClient",
        summary = "Registers a client to acquire an API key.",
        tags = { "Client" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ClientCreationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict - returned if a client with the provided name already exists.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/client",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ClientCreationResponse> createClient(
        @Parameter(name = "ClientCreationRequest", description = "", required = true) @Valid @RequestBody ClientCreationRequest clientCreationRequest
    ) {
        return getDelegate().createClient(clientCreationRequest);
    }

}
