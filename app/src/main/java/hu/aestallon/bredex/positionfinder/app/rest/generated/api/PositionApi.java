/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package hu.aestallon.bredex.positionfinder.app.rest.generated.api;

import hu.aestallon.bredex.positionfinder.app.rest.generated.model.ApiError;
import hu.aestallon.bredex.positionfinder.app.rest.generated.model.Position;
import hu.aestallon.bredex.positionfinder.app.rest.generated.model.PositionSearchResult;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "position", description = "Endpoints concerning position creation, inspection and querying")
public interface PositionApi {

    default PositionApiDelegate getDelegate() {
        return new PositionApiDelegate() {};
    }

    /**
     * POST /position : Creates a new position.
     * Creates a new position.
     *
     * @param position  (required)
     * @return Ok (status code 201)
     *         or Invalid payload (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "createPosition",
        summary = "Creates a new position.",
        tags = { "Position" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Position.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid payload", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuthorization")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/position",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Position> createPosition(
        @Parameter(name = "Position", description = "", required = true) @Valid @RequestBody Position position
    ) {
        return getDelegate().createPosition(position);
    }


    /**
     * GET /position/{id} : Fetches a position.
     * Attempts to return a position by the denoted identifier. 
     *
     * @param id  (required)
     * @return Ok (status code 200)
     *         or Unauthorized (status code 401)
     *         or Not found (status code 404)
     */
    @Operation(
        operationId = "getPosition",
        summary = "Fetches a position.",
        tags = { "Position" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Position.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuthorization")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/position/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Position> getPosition(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Long id
    ) {
        return getDelegate().getPosition(id);
    }


    /**
     * GET /position/search : Searches for matching positions
     * Search all persisted positions to find the ones with matching name/location. The search parameters are to be supplied in the query fragment of the URL. The operation returns a list of URLS (relative to the host of this API), on which the found positions can be inspected. 
     *
     * @param name  (optional)
     * @param location  (optional)
     * @return Ok (status code 200)
     *         or Invalid payload (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "searchPosition",
        summary = "Searches for matching positions",
        tags = { "Position" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PositionSearchResult.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid payload", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuthorization")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/position/search",
        produces = { "application/json" }
    )
    default ResponseEntity<PositionSearchResult> searchPosition(
        @Parameter(name = "name", description = "") @Valid @RequestParam(value = "name", required = false) Optional<String> name,
        @Parameter(name = "location", description = "") @Valid @RequestParam(value = "location", required = false) Optional<String> location
    ) {
        return getDelegate().searchPosition(name, location);
    }

}
